import{j as d}from"./jsx-runtime-BoZ7yaty.js";import{c as T}from"./clsx.m-C7bORDfW.js";import{g as V,a as R,s as u,c as A}from"./generateUtilityClasses-D4qQEpRV.js";import{b as E}from"./useThemeProps-DJft-tfL.js";import{u as z}from"./useControlled-DdQm0pQX.js";import{B as N}from"./ButtonBase-B9dD5NpA.js";function X(t){return R("ESSwitch",t)}const e=V("ESSwitch",["root","checked","track","input","thumb","button","disabled","large","medium","small","indeterminate"]),_=t=>{const{classes:a,checked:r,disabled:s,size:n,indeterminate:o}=t;return A({root:["root",r&&"checked",s&&"disabled",n&&n,o&&"indeterminate"],track:["track"],input:["input"],thumb:["thumb"],button:["button"]},X,a)},j=u("div",{name:"ESSwitch",slot:"Root",overridesResolver:(t,a)=>{const{ownerState:{disabled:r,checked:s,indeterminate:n,size:o}}=t;return[a.root,r&&a.disabled,s&&a.checked,n&&a.indeterminate,a[o]]}})(({ownerState:{color:t},theme:a})=>({position:"relative",display:"inline-flex",alignItems:"center",justifyContent:"center",zIndex:0,color:a.vars.palette.monoA.A500,[`&.${e.checked}`]:{color:a.vars.palette[t][300],[`& .${e.input}`]:{transform:"translateX(-12px)"},[`&.${e.large}`]:{[`& .${e.input}`]:{transform:"translateX(-16px)"},[`& .${e.button}`]:{transform:"translateX(16px)"}},[`& .${e.button}`]:{transform:"translateX(12px)","&:hover":{"--background":a.vars.palette[t].A50,"@media (hover: none)":{"--background":"transparent"}},"--pressed":a.vars.palette[t].A150}},[`&.${e.disabled}`]:{opacity:"0.3",cursor:"not-allowed"},[`&.${e.large}`]:{height:"36px",width:"56px",[`& .${e.track}`]:{borderRadius:"20px",width:"38px",height:"24px"},[`& .${e.input}`]:{width:"56px"},[`& .${e.thumb}`]:{width:"24px",height:"24px"}},[`&.${e.medium}`]:{height:"36px",width:"48px",[`& .${e.track}`]:{width:"32px",height:"14px"},[`& .${e.input}`]:{width:"48px"},[`& .${e.thumb}`]:{width:"20px",height:"20px"}},[`&.${e.small}`]:{height:"32px",width:"46px",[`& .${e.track}`]:{width:"28px",height:"4px"},[`& .${e.input}`]:{width:"46px"},[`& .${e.button}`]:{left:"1px"},[`& .${e.thumb}`]:{width:"16px",height:"16px"}},[`&.${e.indeterminate}`]:{color:a.vars.palette[t][300],[`&.${e.large}`]:{[`& .${e.button}`]:{transform:"translateX(8px)",padding:"17.5px 13px","&:not(:disabled):has(:focus-visible)":{[`& .${e.thumb}`]:{outlineOffset:0}}},[`& .${e.thumb}`]:{width:"14px",height:"5px",borderRadius:"2.5px",borderColor:"transparent"},[`& .${e.input}`]:{transform:"translateX(-8px)"}},[`&.${e.medium}`]:{[`& .${e.button}`]:{transform:"translateX(6px)",padding:"16px 12px","&:not(:disabled):has(:focus-visible)":{[`& .${e.thumb}`]:{outlineOffset:0}}},[`& .${e.thumb}`]:{width:"12px",height:"4px",borderRadius:"2px",borderColor:"transparent"},[`& .${e.input}`]:{transform:"translateX(-6px)"}},[`&.${e.small}`]:{[`& .${e.button}`]:{transform:"translateX(6px)"},[`& .${e.input}`]:{transform:"translateX(-6px)"}},[`& .${e.button}`]:{"&:hover":{"--background":a.vars.palette[t].A50,"@media (hover: none)":{"--background":"transparent"}},"--pressed":a.vars.palette[t].A150}}})),O=u("div",{name:"ESSwitch",slot:"Track",overridesResolver:(t,a)=>a.track})(()=>({borderRadius:"8px",backgroundColor:"currentColor",zIndex:-1})),P=u("div",{name:"ESSwitch",slot:"Thumb",overridesResolver:(t,a)=>a.thumb})(({theme:t})=>({backgroundColor:t.vars.palette.common.switch,border:"2px solid currentColor",borderRadius:"50%",transition:`${t.transitions.duration.shortest}ms`,transitionProperty:"width, height, border, border-radius"})),B=u(N,{name:"ESSwitch",slot:"Button",overridesResolver:(t,a)=>a.button})(({theme:t})=>({borderRadius:"50%",padding:"8px",left:0,zIndex:1,position:"absolute",transition:`${t.transitions.duration.shortest}ms`,"--text":"currentColor","--hovered":t.vars.palette.monoA.A50,"--pressed":t.vars.palette.monoA.A150,"&:not(:disabled):has(:focus-visible)":{[`& .${e.thumb}`]:{outline:`2px solid ${t.vars.palette.monoA[500]}`,outlineOffset:"-2px"}},"@media (hover: none)":{"--background":"transparent"}})),U=u("input",{name:"ESSwitch",slot:"Input",overridesResolver:(t,a)=>a.input})(()=>({cursor:"inherit",position:"absolute",opacity:0,height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1})),v=t=>{const{className:a,checked:r,indeterminate:s,onChange:n,type:o="checkbox",disabled:p,defaultChecked:m,color:g="secondary",size:w="medium",autoFocus:y,id:k,name:f,readOnly:h,value:$,sx:S,...C}=E({props:t,name:"ESSwitch"}),[c,b]=z(m,r),x={...C,disabled:p,color:g,indeterminate:s,checked:!s&&c,size:w},i=_(x),I=l=>{h||(b(l.target.checked),n&&n(l))},q=l=>{!h&&l.key==="Enter"&&(l.preventDefault(),b(!c),n&&n({target:{name:f,checked:!c}}))};return d.jsxs(j,{className:T(i.root,a),ownerState:x,sx:S,children:[d.jsxs(B,{disableTouchRipple:!0,className:i.button,component:"span",disabled:p,tabIndex:-1,children:[d.jsx(U,{autoFocus:y,checked:!!c,className:i.input,defaultChecked:m,disabled:p,id:k,name:f,readOnly:h,type:"checkbox",value:$,onChange:I,onKeyDown:o==="button"?q:void 0}),d.jsx(P,{className:i.thumb})]}),d.jsx(O,{className:i.track})]})};try{v.displayName="Switch",v.__docgenInfo={description:"Switches toggle the state of a single setting on or off.",displayName:"Switch",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<SwitchClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},checked:{defaultValue:null,description:"If `true`, the component is checked.",name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback fired when the state is changed.",name:"onChange",required:!1,type:{name:"((e: ChangeEvent<HTMLInputElement>) => void)"}},indeterminate:{defaultValue:null,description:"If `true`, the component appears indeterminate.",name:"indeterminate",required:!1,type:{name:"boolean"}},color:{defaultValue:{value:"'secondary'"},description:"The color of the component.",name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"error"'},{value:'"warning"'},{value:'"info"'},{value:'"success"'}]}},type:{defaultValue:{value:"'checkbox'"},description:"If 'button', hitting enter will toggle the switch.",name:"type",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"checkbox"'}]}},size:{defaultValue:{value:"'medium'"},description:"The size of the component.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},disabled:{defaultValue:null,description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},defaultChecked:{defaultValue:null,description:"The default checked state. Use when the component is not controlled.",name:"defaultChecked",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the `input` element.",name:"name",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"It prevents the user from changing the value of the field",name:"readOnly",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"The value of the component. The DOM API casts this to a string.",name:"value",required:!1,type:{name:"any"}}}}}catch{}export{v as S,e as s};
