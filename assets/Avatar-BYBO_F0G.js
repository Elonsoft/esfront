import{j as c}from"./jsx-runtime-BoZ7yaty.js";import{r as m}from"./index-DIDRz_s2.js";import{c as p}from"./clsx.m-C7bORDfW.js";import{g as b,a as i}from"./Avatar.classes-DCNH0ybp.js";import{u as q}from"./useThemeProps-DTzdApbH.js";import{s as v,c as S}from"./styled-B0X8gopH.js";import{c as g}from"./identifier-DA8c-tJk.js";import{s as C}from"./SvgIcon.classes-C7Fm2IhD.js";const N=e=>{const{classes:a,variant:t="square",outlined:s}=e,r={root:["root",`variant${g(t)}`,s&&"outlined"],image:["image"]};return S(r,b,a)};function R(e){const[a,t]=m.useState(null);return m.useEffect(()=>{if(!e)return;t(null);let s=!0;const r=new Image;return r.onload=()=>{s&&t("loaded")},r.onerror=()=>{s&&t("error")},r.src=e,()=>{s=!1}},[e]),a}const V=v("div",{name:"ESAvatar",slot:"Root",overridesResolver:(e,a)=>{const{ownerState:{variant:t,outlined:s}}=e;return[a.root,a[`variant${g(t)}`],s&&a.outlined]}})(({theme:e})=>({...e.typography.body100,backgroundColor:e.vars.palette.monoA.A100,backgroundSize:"100%",flexShrink:0,textAlign:"center",objectFit:"cover",display:"flex",alignItems:"center",justifyContent:"center",overflow:"hidden",color:e.vars.palette.monoA.A500,variants:[{props:!0,style:a=>({height:`${a.size}px`,width:`${a.size}px`})}],[`& .${C.root}`]:{color:e.vars.palette.monoA.A400},[`&.${i.variantSquare}`]:{borderRadius:"8px"},[`&.${i.variantCircle}`]:{borderRadius:"50%"},[`&.${i.outlined}`]:{position:"relative","&::after":{content:'""',position:"absolute",inset:0,pointerEvents:"none",borderRadius:"inherit",border:`1px solid ${e.vars.palette.monoA.A100}`}}})),$=v("img",{name:"ESAvatar",slot:"Image",overridesResolver:(e,a)=>[a.image]})({width:"100%",height:"100%"}),f=e=>{const{className:a,children:t,variant:s="square",src:r,alt:n,size:h=40,outlined:y=!1,...l}=q({props:e,name:"ESAvatar"}),d={...l,variant:s,size:h,outlined:y},u=N(d),A=R(r||"")==="loaded",x=r?A:!1;let o=null;return x?o=c.jsx($,{className:p(a,u.image),src:r}):t||t===0?o=t:r&&n&&(o=n),c.jsx(V,{className:p(a,u.root),ownerState:d,...l,children:o})};try{f.displayName="Avatar",f.__docgenInfo={description:"Avatar is used to represent users or things.",displayName:"Avatar",props:{children:{defaultValue:null,description:"Used to render icon or text elements inside the `Avatar` if `src` is not set.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<AvatarClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},className:{defaultValue:null,description:"Class applied to the root element.",name:"className",required:!1,type:{name:"string"}},variant:{defaultValue:{value:"square"},description:"Determines border variant of avatar.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"circle"'},{value:'"square"'}]}},size:{defaultValue:{value:"40"},description:"Avatar size.",name:"size",required:!1,type:{name:"number"}},src:{defaultValue:null,description:"The `src` attribute for the `img` element.",name:"src",required:!1,type:{name:"string"}},alt:{defaultValue:null,description:"The `alt` attribute for the `img` element.",name:"alt",required:!1,type:{name:"string"}},outlined:{defaultValue:null,description:"Determines if the avatar should be outlined.",name:"outlined",required:!1,type:{name:"boolean"}}}}}catch{}export{f as A};
