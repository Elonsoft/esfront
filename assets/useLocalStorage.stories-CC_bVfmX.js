import{j as m}from"./jsx-runtime-BoZ7yaty.js";import{r as a}from"./index-DIDRz_s2.js";import{B as f}from"./Box-wRm4ebgR.js";import{T as h}from"./TextField-B-8j0Rl0.js";import{B as L}from"./Button-CL4pDWwx.js";import"./_commonjsHelpers-gnU0ypJ3.js";import"./styled-QckRPC_l.js";import"./useTheme-Dg4q0o-B.js";import"./extendSxProp-DvIFaZWy.js";import"./memoTheme-DzcScnLI.js";import"./useSlot-CFc0_OMk.js";import"./mergeSlotProps-fp1W1fei.js";import"./useForkRef-Cmn-Dh7x.js";import"./appendOwnerState-BTP2NS_9.js";import"./DefaultPropsProvider-DX0NN56D.js";import"./DefaultPropsProvider-BgzOhfjl.js";import"./useId-DHFVogFr.js";import"./useFormControl-Crkhef2u.js";import"./formControlState-Dq1zat_P.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./isHostComponent-DVu5iVWx.js";import"./index-CckzPfJL.js";import"./emotion-react.browser.esm-Cye-CgRM.js";import"./FormControl-DlxfVnjv.js";import"./isMuiElement-DbqDAyDR.js";import"./useEnhancedEffect-BGNjlb7u.js";import"./ownerWindow-HkKU3E4x.js";import"./ownerDocument-DW-IO8s5.js";import"./useEventCallback-B5h_k30D.js";import"./debounce-Be36O1Ab.js";import"./FormHelperText-BEN161lL.js";import"./Menu-_nfAmUNL.js";import"./index-CycuZXML.js";import"./useSlotProps-CexWkmt_.js";import"./Popover-DEEcjM6r.js";import"./useTheme-ErypeN0Y.js";import"./Grow-Dt_8BulK.js";import"./getReactElementRef-BCGM00pR.js";import"./TransitionGroupContext-8frXp1f-.js";import"./index-BqLR6Ykc.js";import"./index-B9nU-LZm.js";import"./useTimeout-BgqVTnbA.js";import"./mergeSlotProps-CDvdv1-t.js";import"./Modal-B7qrzaAx.js";import"./getScrollbarSize-CaCM53D3.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Portal-Cdjvc33M.js";import"./FocusTrap-vTo9pgoY.js";import"./Fade-DWBj0t68.js";import"./MenuList-hBx3FRLR.js";import"./useControlled-BX5XFdR0.js";import"./createSvgIcon-3eNI6DIc.js";import"./SvgIcon-B3E_vWSd.js";import"./clsx.m-C7bORDfW.js";import"./ButtonBase-BtCzZW19.js";import"./useForkRef-DJnV46t9.js";import"./SvgIcon.classes-CE9bwLeY.js";const B=(r,o,s)=>{const{raw:e=!0,serializer:p=JSON.stringify,deserializer:d=JSON.parse}={},x=a.useMemo(()=>{try{const t=localStorage.getItem(r);return t?e?t:d(t):o??null}catch{return o}},[r]),[g,l]=a.useState(x),v=a.useCallback(t=>{localStorage.setItem(r,e?t:p(t)),l(t)},[r]),S=a.useCallback(()=>{localStorage.removeItem(r),l(o)},[r,o]);return[g,v,S]},Wr={tags:["autodocs"],title:"Hooks/useLocalStorage",parameters:{references:["useLocalStorage"]}},i={render:function(){const[o,s,e]=B("useLocalStorage","");return m.jsxs(f,{sx:{display:"flex",flexWrap:"wrap",gap:"8px",maxWidth:"360px"},children:[m.jsx(h,{fullWidth:!0,"aria-label":"LocalStorage",helperText:"This input's value is saved inside the localStorage in 'useLocalStorage' key.",size:"40",value:o||"",onChange:p=>s(p.target.value)}),m.jsx(L,{color:"primary",size:"400",variant:"contained",onClick:()=>e(),children:"Remove"})]})}};var n,c,u;i.parameters={...i.parameters,docs:{...(n=i.parameters)==null?void 0:n.docs,source:{originalSource:`{
  render: function Render() {
    const [value, update, remove] = useLocalStorage('useLocalStorage', '');
    return <Box sx={{
      display: 'flex',
      flexWrap: 'wrap',
      gap: '8px',
      maxWidth: '360px'
    }}>
        <TextField fullWidth aria-label="LocalStorage" helperText="This input's value is saved inside the localStorage in 'useLocalStorage' key." size="40" value={value || ''} onChange={event => update(event.target.value)} />
        <Button color="primary" size="400" variant="contained" onClick={() => remove()}>
          Remove
        </Button>
      </Box>;
  }
}`,...(u=(c=i.parameters)==null?void 0:c.docs)==null?void 0:u.source}}};const jr=["Demo"];export{i as Demo,jr as __namedExportsOrder,Wr as default};
