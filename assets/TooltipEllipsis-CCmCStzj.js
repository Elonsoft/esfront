import{j as u}from"./jsx-runtime-BoZ7yaty.js";import{r as a}from"./index-DIDRz_s2.js";import{u as p}from"./useResizeObserver-BNbozrrH.js";import{T as d}from"./Tooltip-CQ-Pr0yE.js";const l=({children:n,...r})=>{const[o,i]=a.useState(!1),e=a.useRef(null),t=a.useRef(null);return p(e,()=>{const s=t.current&&t.current.scrollWidth>t.current.offsetWidth||e.current&&e.current.scrollWidth>e.current.offsetWidth||t.current&&t.current.scrollHeight>t.current.offsetHeight||e.current&&e.current.scrollHeight>e.current.offsetHeight;i(!!s)}),u.jsx(d,{...r,disableFocusListener:!o,disableHoverListener:!o,disableTouchListener:!o,children:n({ref:e,childrenRef:t})})};try{l.displayName="TooltipEllipsis",l.__docgenInfo={description:"",displayName:"TooltipEllipsis",props:{className:{defaultValue:null,description:"Class applied to the root element.",name:"className",required:!1,type:{name:"string"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<TooltipClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},color:{defaultValue:{value:"'monoAA600'"},description:"The color of the component.",name:"color",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"warning"'},{value:'"error"'},{value:'"info"'},{value:'"secondary"'},{value:'"primary"'},{value:'"monoB"'},{value:'"monoAA600"'},{value:'"monoBA600"'},{value:'"whiteA600"'}]}},title:{defaultValue:null,description:"Tooltip title. Zero-length titles string, undefined, null and false are never displayed.",name:"title",required:!0,type:{name:"ReactNode"}},id:{defaultValue:null,description:`This prop is used to help implement the accessibility logic.
If you don't provide this prop. It falls back to a randomly generated id.`,name:"id",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!1,type:{name:"boolean"}},onClose:{defaultValue:null,description:`Callback fired when the component requests to be closed.
@param event The event source of the callback.`,name:"onClose",required:!1,type:{name:"((event: Event | SyntheticEvent<Element, Event>) => void)"}},TransitionComponent:{defaultValue:{value:"Fade"},description:"The component used for the transition.",name:"TransitionComponent",required:!1,type:{name:"JSXElementConstructor<TransitionProps & { children: ReactNode; }>"}},TransitionProps:{defaultValue:null,description:"Props applied to the transition element.",name:"TransitionProps",required:!1,type:{name:"TransitionProps"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"{ popper?: ElementType<PopperProps, keyof IntrinsicElements>; transition?: ElementType<any, keyof IntrinsicElements>; tooltip?: ElementType<...> | undefined; arrow?: ElementType<...> | undefined; } | undefined"}},slotProps:{defaultValue:{value:"{}"},description:`The extra props for the slot components.
You can override the existing props or add new ones.`,name:"slotProps",required:!1,type:{name:"{ popper?: (Partial<PopperProps> & TooltipComponentsPropsOverrides); transition?: (TransitionProps & TooltipComponentsPropsOverrides); tooltip?: (HTMLProps<...> & ... 1 more ... & TooltipComponentsPropsOverrides) | undefined; arrow?: (HTMLProps<...> & ... 1 more ... & TooltipComponentsPropsOv..."}},arrow:{defaultValue:{value:"true"},description:"If `true`, adds an arrow to the tooltip.",name:"arrow",required:!1,type:{name:"boolean"}},arrowSize:{defaultValue:{value:"'6'"},description:"Size of the arrow element. Applied only when default arrow is used.",name:"arrowSize",required:!1,type:{name:"enum",value:[{value:'"6"'},{value:'"8"'},{value:'"10"'}]}},arrowIconMapping:{defaultValue:null,description:`The component maps the arrowSize prop to different icons.
If you wish to change this mapping, you can provide your own.`,name:"arrowIconMapping",required:!1,type:{name:'Record<"6" | "8" | "10", { icon: ReactNode; width: number; }>'}},distance:{defaultValue:{value:"4"},description:"The distance from the reference element.",name:"distance",required:!1,type:{name:"number"}},describeChild:{defaultValue:{value:"false"},description:"Set to `true` if the `title` acts as an accessible description.\nBy default the `title` acts as an accessible label for the child.",name:"describeChild",required:!1,type:{name:"boolean"}},disableFocusListener:{defaultValue:{value:"false"},description:"Do not respond to focus-visible events.",name:"disableFocusListener",required:!1,type:{name:"boolean"}},disableHoverListener:{defaultValue:{value:"false"},description:"Do not respond to hover events.",name:"disableHoverListener",required:!1,type:{name:"boolean"}},disableInteractive:{defaultValue:{value:"false"},description:"Makes a tooltip not interactive, i.e. it will close when the user\nhovers over the tooltip before the `leaveDelay` is expired.",name:"disableInteractive",required:!1,type:{name:"boolean"}},disableTouchListener:{defaultValue:{value:"false"},description:"Do not respond to long press touch events.",name:"disableTouchListener",required:!1,type:{name:"boolean"}},enterDelay:{defaultValue:{value:"100"},description:"The number of milliseconds to wait before showing the tooltip.\nThis prop won't impact the enter touch delay (`enterTouchDelay`).",name:"enterDelay",required:!1,type:{name:"number"}},enterNextDelay:{defaultValue:{value:"0"},description:"The number of milliseconds to wait before showing the tooltip when one was already recently opened.",name:"enterNextDelay",required:!1,type:{name:"number"}},enterTouchDelay:{defaultValue:{value:"700"},description:"The number of milliseconds a user must touch the element before showing the tooltip.",name:"enterTouchDelay",required:!1,type:{name:"number"}},followCursor:{defaultValue:null,description:"If set, the tooltip follow the cursor over the wrapped element.",name:"followCursor",required:!1,type:{name:"enum",value:[{value:'"both"'},{value:'"horizontal"'},{value:'"vertical"'}]}},leaveDelay:{defaultValue:{value:"0"},description:"The number of milliseconds to wait before hiding the tooltip.\nThis prop won't impact the leave touch delay (`leaveTouchDelay`).",name:"leaveDelay",required:!1,type:{name:"number"}},leaveTouchDelay:{defaultValue:{value:"1500"},description:"The number of milliseconds after the user stops touching an element before hiding the tooltip.",name:"leaveTouchDelay",required:!1,type:{name:"number"}},onOpen:{defaultValue:null,description:`Callback fired when the component requests to be open.
@param event The event source of the callback.`,name:"onOpen",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>) => void)"}},placement:{defaultValue:{value:"'top'"},description:"Tooltip placement.",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"left"'},{value:'"right"'},{value:'"top"'},{value:'"bottom-end"'},{value:'"bottom-start"'},{value:'"left-end"'},{value:'"left-start"'},{value:'"right-end"'},{value:'"right-start"'},{value:'"top-end"'},{value:'"top-start"'}]}},PopperComponent:{defaultValue:{value:"Popper"},description:"The component used for the popper.",name:"PopperComponent",required:!1,type:{name:"JSXElementConstructor<PopperProps>"}},PopperProps:{defaultValue:{value:"{}"},description:"Props applied to the Popper element.",name:"PopperProps",required:!1,type:{name:"Partial<PopperProps>"}}}}}catch{}export{l as T};
