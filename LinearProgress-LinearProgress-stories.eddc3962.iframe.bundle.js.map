{"version":3,"file":"LinearProgress-LinearProgress-stories.eddc3962.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;AAiDA","sources":["webpack://@esfront/react/./src/components/LinearProgress/LinearProgress.tsx"],"sourcesContent":["import { forwardRef } from 'react';\n\nimport { LinearProgressProps } from './LinearProgress.types';\n\nimport clsx from 'clsx';\nimport { getLinearProgressUtilityClass } from './LinearProgress.classes';\n\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\n\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { keyframes } from '@mui/system';\nimport { capitalize } from '@mui/material';\n\nconst TRANSITION_DURATION = 4;\n\nconst indeterminate1Keyframe = keyframes`\n  0% {\n    left: -35%;\n    right: 100%;\n  }\n\n  60% {\n    left: 100%;\n    right: -90%;\n  }\n\n  100% {\n    left: 100%;\n    right: -90%;\n  }\n`;\n\nconst indeterminate2Keyframe = keyframes`\n  0% {\n    left: -200%;\n    right: 100%;\n  }\n\n  60% {\n    left: 107%;\n    right: -8%;\n  }\n\n  100% {\n    left: 107%;\n    right: -8%;\n  }\n`;\n\ntype LinearProgressOwnerState = {\n  classes?: LinearProgressProps['classes'];\n  variant: NonNullable<LinearProgressProps['variant']>;\n  color: NonNullable<LinearProgressProps['color']>;\n  width: NonNullable<LinearProgressProps['width']>;\n};\n\nconst useUtilityClasses = (ownerState: LinearProgressOwnerState) => {\n  const { classes, variant, color } = ownerState;\n\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, variant],\n    dashed: ['dashed', `dashedColor${capitalize(color)}`],\n    bar1: [\n      'bar',\n      `barColor${capitalize(color)}`,\n      variant === 'indeterminate' && 'bar1Indeterminate',\n      variant === 'determinate' && 'bar1Determinate',\n      variant === 'buffer' && 'bar1Buffer',\n    ],\n    bar2: [\n      'bar',\n      variant !== 'buffer' && `barColor${capitalize(color)}`,\n      variant === 'buffer' && `color${capitalize(color)}`,\n      variant === 'indeterminate' && 'bar2Indeterminate',\n      variant === 'buffer' && 'bar2Buffer',\n    ],\n  };\n\n  return composeClasses(slots, getLinearProgressUtilityClass, classes);\n};\n\nconst LinearProgressRoot = styled('span', {\n  name: 'ESLinearProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const { ownerState } = props;\n\n    return [styles.root, styles[`color${capitalize(ownerState.color)}`], styles[ownerState.variant]];\n  },\n})<{ ownerState: LinearProgressOwnerState }>(({ theme }) => ({\n  position: 'relative',\n  overflow: 'hidden',\n  display: 'block',\n  height: 'var(--ESLinearProgress-width)',\n  borderRadius: 'calc(var(--ESLinearProgress-width) / 2)',\n  zIndex: 0,\n\n  '@media print': {\n    colorAdjust: 'exact',\n  },\n\n  backgroundColor: theme.vars.palette.monoA.A200,\n\n  variants: [\n    {\n      props: {\n        color: 'inherit',\n        variant: 'indeterminate',\n      },\n      style: {\n        backgroundColor: 'none',\n        '&::before': {\n          content: '\"\"',\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: 'transparent',\n          opacity: 0.3,\n        },\n      },\n    },\n    {\n      props: {\n        color: 'inherit',\n        variant: 'determinate',\n      },\n      style: {\n        backgroundColor: 'none',\n        '&::before': {\n          content: '\"\"',\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: 'transparent',\n          opacity: 0.3,\n        },\n      },\n    },\n    {\n      props: {\n        variant: 'buffer',\n      },\n      style: {\n        backgroundColor: 'transparent',\n      },\n    },\n  ],\n}));\n\nconst LinearProgressDashed = styled('span', {\n  name: 'ESLinearProgress',\n  slot: 'Dashed',\n  overridesResolver: (props, styles) => {\n    const { ownerState } = props;\n\n    return [styles.dashed, styles[`dashedColor${capitalize(ownerState.color)}`]];\n  },\n})<{ ownerState: LinearProgressOwnerState }>(({ theme }) => {\n  const backgroundColor = theme.vars.palette.monoA.A200;\n\n  return {\n    position: 'absolute',\n    marginTop: 0,\n    height: '100%',\n    width: '100%',\n    backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 20%, transparent 0%)`,\n    backgroundSize: 'calc(var(--ESLinearProgress-width) * 3) calc(var(--ESLinearProgress-width) * 3)',\n    backgroundPosition: '0 calc(var(--ESLinearProgress-width) * 2)',\n\n    variants: [\n      {\n        props: {\n          color: 'inherit',\n        },\n        style: {\n          opacity: 0.3,\n        },\n      },\n    ],\n  };\n});\n\nconst LinearProgressBar1 = styled('span', {\n  name: 'ESLinearProgress',\n  slot: 'Bar1',\n  overridesResolver: (props, styles) => {\n    const { ownerState } = props;\n\n    return [\n      styles.bar,\n      styles[`barColor${capitalize(ownerState.color)}`],\n      (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar1Indeterminate,\n      ownerState.variant === 'determinate' && styles.bar1Determinate,\n      ownerState.variant === 'buffer' && styles.bar1Buffer,\n    ];\n  },\n})<{ ownerState: LinearProgressOwnerState }>(({ theme }) => ({\n  width: '100%',\n  position: 'absolute',\n  left: 0,\n  bottom: 0,\n  top: 0,\n  transition: 'transform 0.2s linear',\n  transformOrigin: 'left',\n  borderRadius: 'calc(var(--ESLinearProgress-width) / 2)',\n  backgroundColor: 'currentColor',\n\n  variants: [\n    {\n      props: {\n        color: 'primary',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.primary[300],\n      },\n    },\n    {\n      props: {\n        color: 'secondary',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.secondary[300],\n      },\n    },\n    {\n      props: {\n        color: 'error',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.error[300],\n      },\n    },\n    {\n      props: {\n        color: 'warning',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.warning[300],\n      },\n    },\n    {\n      props: {\n        color: 'info',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.info[300],\n      },\n    },\n    {\n      props: {\n        color: 'success',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.success[300],\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n      },\n      style: {\n        transition: `transform .${TRANSITION_DURATION}s linear`,\n      },\n    },\n    {\n      props: {\n        variant: 'buffer',\n      },\n      style: {\n        zIndex: 1,\n        transition: `transform .${TRANSITION_DURATION}s linear`,\n      },\n    },\n    {\n      props: {\n        variant: 'indeterminate',\n      },\n      style: {\n        width: 'auto',\n        animation: `${indeterminate1Keyframe} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite`,\n      },\n    },\n  ],\n}));\n\nconst LinearProgressBar2 = styled('span', {\n  name: 'ESLinearProgress',\n  slot: 'Bar2',\n  overridesResolver: (props, styles) => {\n    const { ownerState } = props;\n\n    return [\n      styles.bar,\n      styles[`barColor${capitalize(ownerState.color)}`],\n      (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar2Indeterminate,\n      ownerState.variant === 'buffer' && styles.bar2Buffer,\n    ];\n  },\n})<{ ownerState: LinearProgressOwnerState }>(({ theme }) => ({\n  width: '100%',\n  position: 'absolute',\n  left: 0,\n  bottom: 0,\n  top: 0,\n  transition: `transform .${TRANSITION_DURATION}s linear`,\n  transformOrigin: 'right',\n  borderRadius: 'calc(var(--ESLinearProgress-width) / 2)',\n\n  variants: [\n    {\n      props: {\n        variant: 'determinate',\n        color: 'inherit',\n      },\n      style: {\n        backgroundColor: 'currentColor',\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n        color: 'primary',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.primary.A400,\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n        color: 'secondary',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.secondary.A400,\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n        color: 'error',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.error.A400,\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n        color: 'warning',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.warning.A400,\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n        color: 'info',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.info.A400,\n      },\n    },\n    {\n      props: {\n        variant: 'determinate',\n        color: 'success',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.success.A400,\n      },\n    },\n    {\n      props: {\n        variant: 'buffer',\n      },\n      style: {\n        backgroundColor: theme.vars.palette.monoA.A200,\n      },\n    },\n    {\n      props: {\n        variant: 'indeterminate',\n      },\n      style: {\n        width: 'auto',\n        animation: `${indeterminate2Keyframe} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite`,\n      },\n    },\n    {\n      props: {\n        variant: 'indeterminate',\n      },\n      style: {\n        transition: 'transform 0.2s linear',\n      },\n    },\n  ],\n}));\n\n/** Express an unspecified wait time or display the length of a process. */\nexport const LinearProgress = forwardRef<HTMLButtonElement, LinearProgressProps>(function LinearProgress(\n  inProps: LinearProgressProps,\n  ref\n) {\n  const props = useThemeProps({ props: inProps, name: 'ESLinearProgress' });\n\n  const { className, width = 4, color = 'primary', value, valueBuffer, variant = 'indeterminate', ...other } = props;\n\n  const ownerState = {\n    ...props,\n    color,\n    variant,\n    width,\n  };\n\n  const classes = useUtilityClasses(ownerState);\n\n  const rootProps = {};\n  const inlineStyles = { bar1: {}, bar2: {}, dashed: {} };\n\n  if (variant === 'determinate' || variant === 'buffer') {\n    if (value !== undefined) {\n      if (value <= 100) {\n        const transform = value - 100;\n        inlineStyles.bar1 = { transform: `translateX(${transform}%)` };\n      }\n    }\n\n    if (valueBuffer !== undefined) {\n      if (valueBuffer <= 100) {\n        const transform = (valueBuffer || 0) - 100;\n        inlineStyles.bar2 = { transform: `translateX(${transform}%)` };\n      }\n    }\n  }\n\n  if (variant === 'buffer') {\n    if (value !== undefined) {\n      const transform = value;\n      inlineStyles.dashed = { transform: `translateX(${transform}%)` };\n    }\n\n    if (valueBuffer !== undefined) {\n      const transform = valueBuffer;\n      inlineStyles.dashed = { transform: `translateX(${transform}%)` };\n    }\n  }\n\n  return (\n    <LinearProgressRoot\n      className={clsx(classes.root, className)}\n      ownerState={ownerState}\n      role=\"progressbar\"\n      style={\n        {\n          '--ESLinearProgress-width': `${width}px`,\n        } as React.CSSProperties\n      }\n      {...rootProps}\n      ref={ref}\n      {...other}\n    >\n      {variant === 'buffer' ? (\n        <LinearProgressDashed className={classes.dashed} ownerState={ownerState} style={inlineStyles.dashed} />\n      ) : null}\n      <LinearProgressBar1 className={classes.bar1} ownerState={ownerState} style={inlineStyles.bar1} />\n      {valueBuffer && <LinearProgressBar2 className={classes.bar2} ownerState={ownerState} style={inlineStyles.bar2} />}\n    </LinearProgressRoot>\n  );\n});\n"],"names":[],"sourceRoot":""}