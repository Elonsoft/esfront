/* stylelint-disable media-feature-name-no-unknown */

@use 'sass:list';
@use 'sass:map';

$breakpoints: (
  xs: 0,
  sm: 640,
  lg: 1280,
) !default;

@function breakpoint-next($name) {
  $breakpoint-names: map.keys($breakpoints);
  $n: list.index($breakpoint-names, $name);

  @if not $n {
    @error "Breakpoint #{$name} is not defined.";
  }

  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

@mixin adaptive-classes($selector) {
  @each $name, $value in $breakpoints {
    @if $value == 0 {
      .#{$selector} {
        @content;
      }
    } @else {
      @media (width >= #{$value}px) {
        .#{$name}\:#{$selector} {
          @content;
        }
      }
    }
  }
}

@mixin up($name) {
  @if not map.has-key($breakpoints, $name) {
    @error "Breakpoint #{$name} is not defined.";
  }

  @media (width >= #{map.get($breakpoints, $name)}px) {
    @content;
  }
}

@mixin down($name) {
  @if not map.has-key($breakpoints, $name) {
    @error "Breakpoint #{$name} is not defined.";
  }

  @media (width < #{map.get($breakpoints, $name)}px) {
    @content;
  }
}

@mixin between($lower, $upper) {
  @if not map.has-key($breakpoints, $lower) {
    @error "Breakpoint #{$lower} is not defined.";
  }

  @if not map.has-key($breakpoints, $upper) {
    @error "Breakpoint #{$upper} is not defined.";
  }

  @media (#{map.get($breakpoints, $lower)}px <= width < #{map.get($breakpoints, $upper)}px) {
    @content;
  }
}

@mixin only($name) {
  @if not map.has-key($breakpoints, $name) {
    @error "Breakpoint #{$name} is not defined.";
  }

  $min: map.get($breakpoints, $name);
  $next: breakpoint-next($name, $breakpoints);
  $max: map.get($breakpoints, $next);

  @if $min != null and $max != null {
    @media (#{$min} <= width < #{$max}px) {
      @content;
    }
  } @else if $max == null {
    @include up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include down($next, $breakpoints) {
      @content;
    }
  }
}
